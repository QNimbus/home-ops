---
apiVersion: batch/v1
kind: Job
metadata:
  name: test-coredns-tailscale
  namespace: tailscale
spec:
  template:
    spec:
      serviceAccountName: tailscale-dns-patcher
      containers:
      - name: patcher
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "=== TESTING MODE: CoreDNS will NOT be modified ==="
          echo "Waiting for Tailscale DNS nameserver to be ready..."

          # Wait for the nameserver service to be ready
          kubectl wait --for=condition=ready pod -l app=nameserver -n tailscale --timeout=300s

          # Get the ClusterIP of the Tailscale DNS service
          TAILSCALE_DNS_IP=$(kubectl get service nameserver -n tailscale -o jsonpath='{.spec.clusterIP}')
          echo "Found Tailscale DNS server at: $TAILSCALE_DNS_IP"

          # Get the current CoreDNS Corefile
          kubectl get configmap coredns -n kube-system -o jsonpath='{.data.Corefile}' > /tmp/current-corefile

          echo "=== Current CoreDNS Corefile ==="
          cat /tmp/current-corefile

          # Check if ts.net section already exists and remove it
          if grep -q "ts\.net:53" /tmp/current-corefile; then
            echo "=== Removing existing ts.net section ==="
            sed -i '/ts\.net:53/,/^}/d' /tmp/current-corefile
          else
            echo "=== No existing ts.net section found ==="
          fi

          # Append the ts.net section
          cat >> /tmp/current-corefile << EOF
          ts.net:53 {
              errors
              cache 30
              forward . $TAILSCALE_DNS_IP
          }
          EOF

          echo "=== New Corefile with ts.net section ==="
          cat /tmp/current-corefile

          # Test JSON escaping
          ESCAPED_COREFILE=$(cat /tmp/current-corefile | jq -Rs .)
          echo "=== JSON Patch (not applied) ==="
          echo "{\"data\":{\"Corefile\":$ESCAPED_COREFILE}}" | jq .

          echo "=== TEST COMPLETED SUCCESSFULLY ==="
          echo "In production mode, this would:"
          echo "1. kubectl patch configmap coredns -n kube-system --type merge -p '...' "
          echo "2. kubectl rollout restart deployment coredns -n kube-system"
      restartPolicy: OnFailure
  backoffLimit: 3
