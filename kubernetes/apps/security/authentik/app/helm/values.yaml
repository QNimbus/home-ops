---
## see: https://github.com/goauthentik/helm/blob/main/charts/authentik/values.yaml
fullnameOverride: &app authentik
global:
  podAnnotations:
    reloader.stakater.com/auto: "true"
  deploymentStrategy:
    type: RollingUpdate

  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  env:
    - name: TZ
      value: "${TIMEZONE:-UTC}"
  envFrom:
    - secretRef:
        name: &secret authentik-secrets

authentik:
  enabled: true
  postgresql:
    name: "${AUTHENTIK_POSTGRESQL__NAME}"
    host: "${AUTHENTIK_POSTGRESQL__HOST}"
    user: "${AUTHENTIK_POSTGRESQL__USER}"
    password: "${AUTHENTIK_POSTGRESQL__PASSWORD}"
  secret_key: "${AUTHENTIK_SECRET_KEY}"

## authentik server
server:
  enabled: true
  name: server

  route:
    main:
      # -- enable an HTTPRoute resource for the authentik server.
      # Be aware that this is an early beta of this feature. We don't guarantee this works and is subject to change.
      enabled: true
      # # -- Set the route apiVersion
      apiVersion: gateway.networking.k8s.io/v1
      # # -- Set the route kind
      kind: HTTPRoute
      # -- Route hostnames
      hostnames:
        # - "authentik.${DOMAIN_PROXII}"
        - "auth.${DOMAIN_APP}"
      https: false
      # -- Reference to parent gateways
      parentRefs:
        - name: external
          namespace: kube-system
          sectionName: https-app

  volumes:
    - name: media
      persistentVolumeClaim:
        claimName: authentik-media

  volumeMounts:
    - name: media
      mountPath: /media

## redis
## see: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  enabled: true

## postgresql
## see: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  enabled: true
  auth:
    enablePostgresUser: false                   # Disable the "postgres" admin user
    username: "${POSTGRES_USER}"                # Custom user name
    password: "${POSTGRES_PASSWORD}"            # Custom user password
    database: "${POSTGRES_DB}"                  # Database name

geoip:
  enabled: false
  editionIds: ${AUTHENTIK_GEOIP_MAXMIND__EDITION_IDS}
  updateInterval: 8
  # -- sign up under https://www.maxmind.com/en/geolite2/signup
  accountId: "${AUTHENTIK_GEOIP_MAXMIND__ACCOUNT_ID}"
  # -- sign up under https://www.maxmind.com/en/geolite2/signup
  licenseKey: "${AUTHENTIK_GEOIP_MAXMIND__LICENSE_KEY}"

  image:
    # -- If defined, a repository for GeoIP images
    repository: ghcr.io/maxmind/geoipupdate
    # -- If defined, a tag for GeoIP images
    tag: v7.1.0
    # -- If defined, an image digest for GeoIP images
    digest: ""
    # -- If defined, an imagePullPolicy for GeoIP images
    pullPolicy: IfNotPresent

  # -- Environment variables to pass to the GeoIP containers
  env:
    - name: TZ
      value: "${TIMEZONE:-UTC}"

  # -- envFrom to pass to the GeoIP containers
  # @default -- `[]` (See [values.yaml])
  envFrom: []
    # - configMapRef:
    #     name: config-map-name
    # - secretRef:
    #     name: secret-name

  # -- Additional volumeMounts to the GeoIP containers. Make sure the volumes exists for the server and the worker.
  volumeMounts: []
    # - name: custom
    #   mountPath: /custom

  # -- Resource limits and requests for GeoIP containers
  resources: {}
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    # limits:
    #   memory: 128Mi

  # -- GeoIP container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext: {}
    # Not all of the following has been tested. Use at your own risk.
    # runAsNonRoot: true
    # readOnlyRootFilesystem: true
    # allowPrivilegeEscalation: false
    # seccomProfile:
    #   type: RuntimeDefault
    # capabilities:
    #   drop:
    #     - ALL
