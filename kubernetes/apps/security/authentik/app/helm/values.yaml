---
## see: https://github.com/goauthentik/helm/blob/main/charts/authentik/values.yaml

# -- Provide a name in place of `authentik`.
# nameOverride: ""
# -- String to fully override "authentik.fullname".
fullnameOverride: &app authentik
# -- Override the Kubernetes version, which is used to evaluate certain manifests
# kubeVersionOverride: ""

# -- Globally shared configuration for authentik components.
global:
  # -- Provide a name in place of `authentik`
  # nameOverride: ""
  # -- String to fully override "authentik.fullname"
  # fullnameOverride: ""
  # -- A custom namespace to override the default namespace for the deployed resources.
  # namespaceOverride: ""
  # -- Common labels for all resources.
  # additionalLabels: {}
  # -- Number of old deployment ReplicaSets to retain.
  revisionHistoryLimit: 3
  # -- Default image used by all authentik components.
  # image:
  #   repository: ghcr.io/goauthentik/server
  #   tag: ""
  #   digest: ""
  #   pullPolicy: IfNotPresent
  # -- Secrets with credentials to pull images from a private registry
  # imagePullSecrets: []
  # -- Annotations for all deployed Deployments
  # deploymentAnnotations: {}
  # -- Annotations for all deployed pods
  podAnnotations: &podAnnotations
    # -- Automatically reload pods when the specified secret changes.
    reloader.stakater.com/reload: &secret authentik-secrets
  # -- Annotations for all deployed secrets
  # secretAnnotations: {}
  # -- Labels for all deployed pods
  # podLabels: {}
  # -- Add Prometheus scrape annotations to all metrics services.
  # addPrometheusAnnotations: false
  # -- Deployment strategy for all deployed Deployments
  deploymentStrategy:
    type: Recreate

  # -- Toggle and define pod-level security context.
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  # -- Mapping between IP and hostnames that will be injected as entries in the pod's hosts files
  # hostAliases: []
  # -- Default priority class for all components
  # -- The system-cluster-critical priority class ensures Authentik pods have higher
  # -- scheduling priority, which is appropriate as it's a critical authentication service
  priorityClassName: system-cluster-critical
  # -- Default node selector for all components
  # nodeSelector: {}
  # -- Default tolerations for all components
  # tolerations: []
  # -- Default affinity preset for all components
  # affinity:
  #   podAntiAffinity: soft
  #   nodeAffinity:
  #     type: hard
  #     matchExpressions: []
  # -- Default [TopologySpreadConstraints] rules for all components
  # topologySpreadConstraints: []

  # -- Environment variables to pass to all deployed Deployments.
  env:
    - name: TZ
      value: "${TIMEZONE:-UTC}"
  # -- envFrom to pass to all deployed Deployments.
  envFrom:
    - secretRef:
        name: *secret

  # -- Additional volumes to all deployed Deployments.
  volumes: &volumes
    - name: config
      persistentVolumeClaim:
        claimName: authentik-config

  # -- Additional volumeMounts to all deployed Deployments.
  volumeMounts: &volumeMounts
    - name: config
      mountPath: /media
      subPath: media
    - name: config
      mountPath: /templates
      subPath: templates

# -- Authentik configuration
authentik:
  # -- whether to create the authentik configuration secret
  enabled: true

  # -- This sends anonymous usage-data to authentik.
  disable_startup_analytics: true
  # -- This checks for new versions of authentik.
  disable_update_check: false

  # -- Relative path the authentik instance will be available at.
  # web:
  #   path: /

  # -- Email configuration
  email:
    # -- SMTP Server emails are sent from, fully optional
    # host: ""
    # -- SMTP server port
    port: 587
    # -- SMTP credentials, when left empty, no authentication will be done
    # username: ""
    # -- SMTP credentials, when left empty, no authentication will be done
    # password: ""
    # -- Use StartTLS. Enable either use_tls or use_ssl, they can't be enabled at the same time.
    use_tls: true
    # -- Use SSL. Enable either use_tls or use_ssl, they can't be enabled at the same time.
    # use_ssl: false
    # -- Connection timeout
    timeout: 30
    # -- Email from address
    # from: ""

  # -- Outpost configuration
  # outposts:
  #   container_image_base: ghcr.io/goauthentik/%(type)s:%(version)s

  # -- This sends anonymous usage-data, stack traces on errors and performance data to sentry.beryju.org
  error_reporting:
    enabled: false
    # environment: "k8s"
    # send_pii: false

  # -- Log level for server and worker
  log_level: info

  # -- Event context processors
  events:
    context_processors:
      # -- Path for the GeoIP City database.
      geoip: "/geoip/GeoLite2-City.mmdb"
      # -- Path for the GeoIP ASN database.
      asn: "/geoip/GeoLite2-ASN.mmdb"

  # -- PostgreSQL connection settings
  postgresql:
    # -- set the postgresql hostname to talk to
    host: "${DB_SERVER}"
    name: "${AUTHENTIK_POSTGRESQL__NAME}"
    user: "${AUTHENTIK_POSTGRESQL__USER}"
    password: "${AUTHENTIK_POSTGRESQL__PASSWORD}"
    port: 5432

  # -- Redis connection settings
  redis:
    # -- set the redis hostname to talk to
    host: "${AUTHENTIK_REDIS__SERVER}"
    password: "${AUTHENTIK_REDIS__PASSWORD}"

  # -- Secret key used for cookie singing and unique user IDs, don't change this after the first install
  secret_key: "${AUTHENTIK_SECRET_KEY}"

# -- Blueprint configuration
# blueprints:
#   configMaps: []
#   secrets: []

## authentik server
server:
  # -- whether to enable server resources
  enabled: true
  # -- authentik server name
  name: server
  # -- The number of server pods to run
  # replicas: 1
  # -- Horizontal Pod Autoscaler configuration
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 5
  #   targetCPUUtilizationPercentage: 50
  #   targetMemoryUtilizationPercentage: ~
  #   behavior: {}
  #   metrics: []
  # -- Pod Disruption Budget configuration
  # pdb:
  #   enabled: false
  #   labels: {}
  #   annotations: {}
  #   minAvailable: ""
  #   maxUnavailable: ""
  # -- Image configuration
  # image:
  #   repository: ""
  #   tag: ""
  #   digest: ""
  #   pullPolicy: ""
  # -- Secrets with credentials to pull images from a private registry
  # imagePullSecrets: []
  # -- Environment variables to pass to the authentik server.
  # env: []
  # -- envFrom to pass to the authentik server.
  # envFrom: []
  # -- Lifecycle hooks for the authentik server container
  # lifecycle: {}
  # -- Additional containers to be added to the authentik server pod
  # extraContainers: []
  # -- Init containers to add to the authentik server pod
  initContainers:
    - name: init-db
      image: ghcr.io/home-operations/postgres-init:17.5.0@sha256:e0c87ce7df39d06b93f27cf2cc6a056611f13faaa88cc07ab4dc8bf7a85d0b11
      envFrom:
        - secretRef:
            name: *secret
  # -- Additional volumeMounts to the authentik server main container
  volumeMounts:
    - name: custom-assets
      mountPath: /web/dist/custom.css
      subPath: custom.css
  # -- Additional volumes to the authentik server pod
  volumes:
    - name: custom-assets
      configMap:
        name: authentik-custom-assets
  # -- Annotations to be added to the authentik server Deployment
  # deploymentAnnotations: {}
  # -- Annotations to be added to the authentik server pods
  # podAnnotations: {}
  # -- Labels to be added to the authentik server pods
  # podLabels: {}
  # -- Resource limits and requests for the authentik server
  # resources: {}
  # -- authentik server container ports
  # containerPorts:
  #   http: 9000
  #   https: 9443
  #   metrics: 9300
  # -- Host Network for authentik server pods
  # hostNetwork: false
  # -- DNS configuration
  # dnsConfig: {}
  # -- Alternative DNS policy for authentik server pods
  # dnsPolicy: ""
  # -- serviceAccount to use for authentik server pods
  # serviceAccountName: ~
  # -- authentik server pod-level security context
  # securityContext: {}
  # -- authentik server container-level security context
  containerSecurityContext:
    readOnlyRootFilesystem: true
  # -- Liveness probe configuration
  # livenessProbe:
  #   failureThreshold: 3
  #   initialDelaySeconds: 5
  #   periodSeconds: 10
  #   successThreshold: 1
  #   timeoutSeconds: 1
  #   httpGet:
  #     path: "{{ .Values.authentik.web.path }}-/health/live/"
  #     port: http
  # -- Readiness probe configuration
  # readinessProbe:
  #   failureThreshold: 3
  #   initialDelaySeconds: 5
  #   periodSeconds: 10
  #   successThreshold: 1
  #   timeoutSeconds: 1
  #   httpGet:
  #     path: "{{ .Values.authentik.web.path }}-/health/ready/"
  #     port: http

  # -- Gateway API HTTPRoute configuration
  route:
    main:
      # -- enable an HTTPRoute resource for the authentik server.
      enabled: true
      # -- Set the route apiVersion
      # apiVersion: gateway.networking.k8s.io/v1
      # -- Set the route kind
      # kind: HTTPRoute
      # -- Route annotations
      # annotations: {}
      # -- Route labels
      # labels: {}
      # -- Route hostnames
      hostnames:
        - "auth.${DOMAIN_APP}"
      # -- Create http route for redirect
      # httpsRedirect: false
      # -- uses `server.service.servicePortHttps` instead of `server.service.servicePortHttp`
      # https: false
      # -- Reference to parent gateways
      parentRefs:
        - name: external
          namespace: kube-system
          sectionName: https-app
      # -- Route matches
      # matches:
      #   - path:
      #       type: PathPrefix
      #       value: "{{ .Values.authentik.web.path }}"
      # -- Route filters
      # filters: []
      # -- Additional custom rules that can be added to the route
      # additionalRules: []

  # -- Startup probe configuration
  startupProbe:
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 180
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 30
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 5
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    ## Probe configuration
    httpGet:
      path: "{{ .Values.authentik.web.path }}-/health/live/"
      port: http
  # -- terminationGracePeriodSeconds for container lifecycle hook
  # terminationGracePeriodSeconds: 30
  # -- Prority class for the authentik server pods
  # priorityClassName: ""
  # -- [Node selector]
  # nodeSelector: {}
  # -- [Tolerations] for use with node taints
  # tolerations: []
  # -- Assign custom [affinity] rules to the deployment
  # affinity: {}
  # -- Assign custom [TopologySpreadConstraints] rules to the authentik server
  # topologySpreadConstraints: []
  # -- Deployment strategy to be added to the authentik server Deployment
  # deploymentStrategy: {}
  # -- authentik server service configuration
  # service:
  #   annotations: {}
  #   labels: {}
  #   type: ClusterIP
  #   nodePortHttp: 30080
  #   nodePortHttps: 30443
  #   servicePortHttp: 80
  #   servicePortHttps: 443
  #   servicePortHttpName: http
  #   servicePortHttpsName: https
  #   loadBalancerIP: ""
  #   loadBalancerSourceRanges: []
  #   externalIPs: []
  #   externalTrafficPolicy: ""
  #   sessionAffinity: ""
  #   sessionAffinityConfig: {}
  # -- authentik server metrics service configuration
  # metrics:
  #   enabled: false
  #   service:
  #     type: ClusterIP
  #     clusterIP: ""
  #     annotations: {}
  #     labels: {}
  #     servicePort: 9300
  #     portName: metrics
  #   serviceMonitor:
  #     enabled: false
  #     interval: 30s
  #     scrapeTimeout: 3s
  #     relabelings: []
  #     metricRelabelings: []
  #     selector: {}
  #     scheme: ""
  #     tlsConfig: {}
  #     namespace: ""
  #     labels: {}
  #     annotations: {}
  # -- Ingress configuration
  # ingress:
  #   enabled: false
  #   annotations: {}
  #   labels: {}
  #   ingressClassName: ""
  #   hosts: []
  #   paths:
  #     - "{{ .Values.authentik.web.path }}"
  #   pathType: Prefix
  #   extraPaths: []
  #   tls: []
  #   https: false

## authentik worker
worker:
  # -- whether to enable worker resources
  enabled: true
  # -- authentik worker name
  name: worker
  # -- The number of worker pods to run
  # replicas: 1
  # -- Horizontal Pod Autoscaler configuration
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 5
  #   targetCPUUtilizationPercentage: 50
  #   targetMemoryUtilizationPercentage: ~
  #   behavior: {}
  #   metrics: []
  # -- Pod Disruption Budget configuration
  # pdb:
  #   enabled: false
  #   labels: {}
  #   annotations: {}
  #   minAvailable: ""
  #   maxUnavailable: ""
  # -- Image configuration
  # image:
  #   repository: ""
  #   tag: ""
  #   digest: ""
  #   pullPolicy: ""
  # -- Secrets with credentials to pull images from a private registry
  # imagePullSecrets: []
  # -- Environment variables to pass to the authentik worker.
  # env: []
  # -- envFrom to pass to the authentik worker.
  # envFrom: []
  # -- Lifecycle hooks for the authentik worker container
  # lifecycle: {}
  # -- Additional containers to be added to the authentik worker pod
  # extraContainers: []
  # -- Init containers to add to the authentik worker pod
  # initContainers: []
  # -- Additional volumeMounts to the authentik worker main container
  # volumeMounts: []
  # -- Additional volumes to the authentik worker pod
  # volumes: []
  # -- Annotations to be added to the authentik worker Deployment
  # deploymentAnnotations: {}
  # -- Annotations to be added to the authentik worker pods
  # podAnnotations: {}
  # -- Labels to be added to the authentik worker pods
  # podLabels: {}
  # -- Resource limits and requests for the authentik worker
  # resources: {}
  # -- Host Network for authentik worker pods
  # hostNetwork: false
  # -- DNS configuration
  # dnsConfig: {}
  # -- Alternative DNS policy for authentik worker pods
  # dnsPolicy: ""
  # -- serviceAccount to use for authentik worker pods
  # serviceAccountName: ~
  # -- authentik worker pod-level security context
  # securityContext: {}
  # -- authentik worker container-level security context
  containerSecurityContext:
    readOnlyRootFilesystem: true
  # -- Liveness probe configuration
  # livenessProbe:
  #   failureThreshold: 3
  #   initialDelaySeconds: 5
  #   periodSeconds: 10
  #   successThreshold: 1
  #   timeoutSeconds: 1
  #   exec:
  #     command:
  #       - ak
  #       - healthcheck
  # -- Readiness probe configuration
  # readinessProbe:
  #   failureThreshold: 3
  #   initialDelaySeconds: 5
  #   periodSeconds: 10
  #   successThreshold: 1
  #   timeoutSeconds: 1
  #   exec:
  #     command:
  #       - ak
  #       - healthcheck

  # -- Startup probe configuration
  startupProbe:
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 180
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 30
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 5
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    ## Probe configuration
    exec:
      command:
        - ak
        - healthcheck
  # -- terminationGracePeriodSeconds for container lifecycle hook
  # terminationGracePeriodSeconds: 30
  # -- Prority class for the authentik worker pods
  # priorityClassName: ""
  # -- [Node selector]
  # nodeSelector: {}
  # -- [Tolerations] for use with node taints
  # tolerations: []
  # -- Assign custom [affinity] rules to the deployment
  # affinity: {}
  # -- Assign custom [TopologySpreadConstraints] rules to the authentik worker
  # topologySpreadConstraints: []
  # -- Deployment strategy to be added to the authentik worker Deployment
  # deploymentStrategy: {}

# -- Service account configuration
# serviceAccount:
#   create: true
#   annotations: {}
#   serviceAccountSecret:
#     enabled: false
#     fullnameOverride: authentik

## redis
## see: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  # -- enable the Bitnami Redis chart.
  enabled: false
  # architecture: standalone
  # auth:
  #   enabled: false

  # master:
  #   # -- Annotations for the redis master pod
  #   podAnnotations: *podAnnotations
  #   # resourcesPreset: "none"

  #   # -- Persistence configuration for redis master
  #   persistence:
  #     enabled: true
  #     # -- Use an existing PVC for Redis data
  #     existingClaim: "${APP}-config"
  #     path: /data
  #     subPath: authentik/redis
  # replica:
  #   resourcesPreset: "none"
  # sentinel:
  #   resourcesPreset: "none"
  # metrics:
  #   resourcesPreset: "none"
  # volumePermissions:
  #   resourcesPreset: "none"
  # sysctl:
  #   resourcesPreset: "none"

## postgresql
## see: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  # -- enable the Bitnami PostgreSQL chart.
  enabled: false
  # -- PostgreSQL authentication settings
  # auth:
    # -- Disable the "postgres" admin user
    # enablePostgresUser: false
    # -- Custom user name
    # username: "${POSTGRES_USER}"
    # -- Custom user password
    # password: "${POSTGRES_PASSWORD}"
    # -- Database name
    # database: "${POSTGRES_DB}"

  # primary:
    # -- Annotations for the postgresql primary pod
    # podAnnotations: *podAnnotations
    # extendedConfiguration: |
    #   max_connections = 500
    # resourcesPreset: "none"

    # -- Persistence configuration for postgresql primary
    # persistence:
    #   enabled: true
    #   # -- Use an existing PVC for PostgreSQL data
    #   existingClaim: "${APP}-config"
    #   mountPath: /bitnami/postgresql
    #   subPath: authentik/postgresql
  # readReplicas:
  #   resourcesPreset: "none"
  # backup:
  #   resourcesPreset: "none"
  # passwordUpdateJob:
  #   resourcesPreset: "none"
  # volumePermissions:
  #   resourcesPreset: "none"
  # metrics:
  #   resourcesPreset: "none"

# -- GeoIP sidecar configuration
geoip:
  # -- enable GeoIP sidecars for the authentik server and worker pods
  enabled: true
  # -- MaxMind edition IDs to download
  editionIds: "${GEOIPUPDATE_EDITION_IDS:-GeoLite2-City GeoLite2-ASN}"
  # -- GeoIP update frequency, in hours
  updateInterval: 24
  # -- sign up under https://www.maxmind.com/en/geolite2/signup
  accountId: "${AUTHENTIK_GEOIP_MAXMIND__ACCOUNT_ID}"
  # -- sign up under https://www.maxmind.com/en/geolite2/signup
  licenseKey: "${AUTHENTIK_GEOIP_MAXMIND__LICENSE_KEY}"
  # -- use existing secret instead of values above
  existingSecret:
    secretName: *secret
    accountId: "GEOIPUPDATE_ACCOUNT_ID"
    licenseKey: "GEOIPUPDATE_LICENSE_KEY"

  # -- Image for the GeoIP sidecar
  image:
    # -- If defined, a repository for GeoIP images
    repository: ghcr.io/maxmind/geoipupdate
    # -- If defined, a tag for GeoIP images
    tag: v7.1.0
    # -- If defined, an image digest for GeoIP images
    digest: ""
    # -- If defined, an imagePullPolicy for GeoIP images
    pullPolicy: IfNotPresent

  # -- Environment variables to pass to the GeoIP containers
  env:
    - name: TZ
      value: "${TIMEZONE:-UTC}"

  # -- envFrom to pass to the GeoIP containers
  envFrom: []

  # -- Additional volumeMounts to the GeoIP containers.
  volumeMounts: []

  # -- Resource limits and requests for GeoIP containers
  resources: {}

  # -- GeoIP container-level security context
  containerSecurityContext: {}

# -- PrometheusRule configuration
prometheus:
  rules:
    enabled: true
    namespace: security
#     selector: {}
#     labels: {}
#     annotations: {}

# -- additional resources to deploy.
# additionalObjects: []
