---
# Checkmate Helm Chart Values
# Reference: https://github.com/bluewave-labs/checkmate/tree/main/charts/helm/checkmate

# Global configuration
global:
  storageClass: "longhorn"

# Client (Frontend) configuration
client:
  replicaCount: 2
  image:
    repository: ghcr.io/bluewave-labs/checkmate-client
    tag: "2.1.4"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 3000

  ingress:
    enabled: true
    className: "external"
    annotations:
      external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
      nginx.ingress.kubernetes.io/auth-method: GET
      nginx.ingress.kubernetes.io/auth-url: http://authelia.security.svc.cluster.local/api/verify
      nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}?rm=$request_method"
      nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Email,Remote-Groups
      nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Method $request_method;
    hosts:
      - host: "${CHECKMATE_HOSTNAME}"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: checkmate-tls
        hosts:
          - "${CHECKMATE_HOSTNAME}"

  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Server (Backend) configuration
server:
  replicaCount: 2
  image:
    repository: ghcr.io/bluewave-labs/checkmate-server
    tag: "2.1.4"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 3001

  ingress:
    enabled: true
    className: "external"
    annotations:
      external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://${CHECKMATE_HOSTNAME}"
      nginx.ingress.kubernetes.io/enable-cors: "true"
    hosts:
      - host: "${CHECKMATE_SERVER_HOSTNAME}"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: checkmate-api-tls
        hosts:
          - "${CHECKMATE_SERVER_HOSTNAME}"

  env:
    CLIENT_HOST: "https://${CHECKMATE_HOSTNAME}"
    DB_TYPE: "mongodb"
    REDIS_HOST: "checkmate-redis"
    REDIS_PORT: "6379"
    LOG_LEVEL: "warn"
    NODE_ENV: "production"
    PORT: "3001"
    TOKEN_TTL: "3600"
    REFRESH_TOKEN_TTL: "86400"

  existingSecret: "checkmate-secret"

  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi

# MongoDB configuration
mongodb:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    rootUser: root
    existingSecret: checkmate-secret
    rootPasswordKey: CHECKMATE_DB_PASSWORD
    database: checkmate
    username: checkmate
    passwordKey: CHECKMATE_DB_PASSWORD

  primary:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: "longhorn"

    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

# Redis configuration
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false

  master:
    persistence:
      enabled: true
      size: 2Gi
      storageClass: "longhorn"

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi

# Service Monitor for Prometheus (if monitoring is enabled)
serviceMonitor:
  enabled: false
  labels: {}
  interval: 30s
  scrapeTimeout: 10s

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policies
networkPolicy:
  enabled: false

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001
